{"version":3,"sources":["utils/colors.js","components/Button/Button.js","services/task.js","components/Card/Card.js","views/Home/components/OptionsCard/OptionsCard.js","views/Home/components/ModalDelete/ModalDelete.js","views/Home/components/ModalUpdate/ModalUpdate.js","views/Home/components/ListCard/ListCard.js","utils/moment.js","views/Home/Home.js","views/TasksChart/TasksChart.js","views/ListCompletedTasks/ListCompletedTasks.js","App.js","GlobalStyles.js","reportWebVitals.js","index.js"],"names":["colors","CustomButton","styled","AntdButton","background","CustomButtonDefault","Button","type","children","onClick","loading","size","defaultProps","createTask","data","a","axios","post","response","getActiveTasks","get","getCompletedTasks","deleteTask","id","delete","updateTask","task","patch","getTaskById","currentTaskId","queryKey","console","log","updateTaskStatus","getTasksLastWeek","TaskCard","div","Card","Option","OptionsText","p","OptionsCard","handleDelete","handleUpdate","handleMarkAsComplete","DeleteOutlined","EditOutlined","CheckOutlined","ModalDelete","visible","onOk","onCancel","isLoading","closeIcon","footer","LabelForm","label","CustomInput","Input","FlexContainer","CustomDurationContainer","ModalUpdate","form","useEffect","setFieldsValue","title","description","minutes","seconds","layout","htmlFor","Item","name","placeholder","rules","min","max","ListCardContainer","CardTitle","h4","CardDescription","OptionsContainer","CountdownContainer","ListCard","newTask","useState","tasks","setTasks","isModalVisible","setIsModalVisible","isModalUpdateVisible","setIsModalUpdateVisible","isLoadingOk","setIsLoadingOk","undefined","taskDeleted","setTaskDeleted","taskUpdated","setTaskUpdated","taskStatusUpdated","setTaskStatusUpdated","setCurrentTaskId","setTask","Form","useForm","queryClient","useQueryClient","useQuery","enabled","dataTaskById","isLoadingGet","dataActiveTasks","useMutation","onSuccess","onError","onSettled","invalidateQueries","mutateDelete","mutate","isLoadingDelete","mutateUpdate","isLoadingUpdate","mutateUpdateStatus","newTasks","slice","filter","currentTasks","found","find","status","created_at","updated_at","countDownRef","useRef","Countdown","Statistic","map","i","content","trigger","shape","icon","EllipsisOutlined","style","fontSize","color","value","moment","add","ref","el","current","onFinish","refIndex","startTimer","PlayCircleOutlined","stopTimer","PauseCircleOutlined","taskModified","formUpdateValues","getFieldsValue","customDurationMinutes","customDurationSeconds","Home","isCheckboxChecked","setIsCheckboxChecked","newTasAdded","setNewTaskAdded","handleOk","formValues","preDuration","handleCancel","resetFields","onChange","checked","e","handleChangeCheckbox","currentValues","handlePreDurationChange","TasksChart","xAxis","setXAxis","yAxis","setYAxis","days","day","options","maintainAspectRatio","scales","y","suggestedMin","suggestedMax","width","height","labels","datasets","backgroundColor","borderColor","borderWidth","ListCompletedTasks","App","CustomSider","CustomLink","Link","LinksContainer","Content","maxWidth","to","exact","path","component","GlobalStyle","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","defaultOptions","queries","refetchOnWindowFocus","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.d9a5acca.chunk.js","sourcesContent":["export const colors = {\n    yellow: \"#F9D47D\",\n    yellowHover: \"#E5C272\",\n    yellowActive: \"#DEBC6E\",\n    black: \"#4F4E50\",\n    black2: \"#767577\",\n    gray: \"#F5F8F9\",\n    gray2: \"#B4B3B9\",\n    gray3: \"#F9FCFE\",\n};","import React from 'react'\nimport { Button as AntdButton } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '../../utils/colors';\n\nconst CustomButton = styled(AntdButton)`\n    background: ${({ background }) => background || colors.yellow};\n    border-color: ${colors.yellow};\n    color: ${colors.black};\n    border-radius: 5px;\n    font-family: 'Poppins', sans-serif;\n    font-weight: 500;\n    font-size: 14px;\n    &:hover {\n        color: ${colors.black};\n        border-color: ${colors.yellow}; \n        background: ${colors.yellowHover}; \n    }\n\n    &:active {\n        color: ${colors.black};\n        border-color: ${colors.yellow}; \n        background: ${colors.yellowActive}; \n    }\n\n    &:focus {\n        color: ${colors.black};\n        border-color: ${colors.yellow}; \n        background: ${colors.yellowHover}; \n    }\n`;\n\nconst CustomButtonDefault = styled(AntdButton)`\nbackground: white;\nborder-color: ${colors.black};\ncolor: ${colors.black};\nborder-radius: 5px;\nfont-family: 'Poppins', sans-serif;\nfont-weight: 500;\nfont-size: 14px;\n&:hover {\n    color: ${colors.black};\n    border-color: ${colors.black}; \n    background: ${colors.gray}; \n}\n\n&:active {\n    color: ${colors.black};\n    border-color: ${colors.black}; \n    background: ${colors.gray2}; \n}\n\n&:focus {\n    color: ${colors.black};\n    border-color: ${colors.black}; \n    background: ${colors.gray}; \n}\n`;\n\nconst Button = ({ type, children, onClick, loading }) => {\n    return (\n        <>\n        {\n            type === \"primary\" ? \n            <CustomButton onClick={onClick} loading={loading} type=\"primary\" size=\"large\">\n                {children}\n            </CustomButton> : \n            (\n                <CustomButtonDefault onClick={onClick} loading={loading} type=\"default\" size=\"large\">\n                    {children}\n                </CustomButtonDefault>\n            )\n        }\n\n        </>\n    )\n}\n\nButton.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    onClick: PropTypes.func,\n    loading: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired\n};\n\nButton.defaultProps = {\n    children: \"\",\n    loading: false,\n    type: 'Primary',\n}\n\nexport default Button\n","import axios from 'axios';\n\nexport const createTask = async (data) => {\n    const response = await axios.post('https://tasks-ark-server.herokuapp.com/tasks', data);\n    return response.data;\n}\n\nexport const getActiveTasks = async () => {\n    const response = await axios.get('https://tasks-ark-server.herokuapp.com/tasks')\n    return response.data;\n}\n\nexport const getCompletedTasks = async () => {\n    const response = await axios.get('https://tasks-ark-server.herokuapp.com/tasks/completed')\n    return response.data;\n}\n\nexport const deleteTask = async (id) => {\n    const response = await axios.delete(`https://tasks-ark-server.herokuapp.com/tasks/${id}`)\n    return response.data;\n}\n\nexport const updateTask = async (task) => {\n    const { id, data } = task;\n    const response = await axios.patch(`https://tasks-ark-server.herokuapp.com/tasks/${id}`, data)\n    return response.data;\n}\n\nexport const getTaskById = async (data) => {\n    const { currentTaskId } = data.queryKey[1];\n    console.log(currentTaskId);\n    const response = await axios.get(`https://tasks-ark-server.herokuapp.com/tasks/${currentTaskId}`)\n    return response.data;\n}\n\nexport const updateTaskStatus = async (task) => {\n    const { id, data } = task;\n    const response = await axios.patch(`https://tasks-ark-server.herokuapp.com/tasks/status/${id}`, data)\n    return response.data;\n}\n\nexport const getTasksLastWeek = async () => {\n    const response = await axios.get('https://tasks-ark-server.herokuapp.com/tasks/last-week')\n    return response.data;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { colors } from '../../utils/colors';\n\nconst TaskCard = styled.div`\n    box-shadow: 1px 7px 18px -8px ${colors.gray3};\n    padding: 24px;\n    width: 100%;\n    background-color: ${colors.gray3};\n    border-radius: 5px;\n    border: 1px solid ${colors.gray};\n    margin-bottom: 16px;\n    &:last-of-type {\n        margin-bottom: 0;\n    }\n`;\n\nconst Card = ({ children }) => {\n    return (\n        <TaskCard>\n            {children}\n        </TaskCard>\n    )\n}\n\nCard.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n};\n\nCard.defaultProps = {\n    children: \"\",\n}\n\nexport default Card\n","import React from 'react'\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { DeleteOutlined, EditOutlined, CheckOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\n\nconst Option = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst OptionsText = styled.p`\n    margin-left: 16px;\n    margin-bottom: 0;\n`;\n\nconst CustomButton = styled(Button)`\n    display: block;\n`;\n\nconst OptionsCard = ({ handleDelete, handleUpdate, handleMarkAsComplete }) => {\n    return (\n        <>\n                <CustomButton type=\"text\" onClick={handleDelete}>\n                    <Option>\n                        <DeleteOutlined />\n                        <OptionsText>\n                            Eliminar\n                        </OptionsText>\n                    </Option>\n                </CustomButton>\n                <CustomButton type=\"text\" onClick={handleUpdate}>\n                    <Option>\n                        <EditOutlined />\n                        <OptionsText>\n                            Editar\n                        </OptionsText>\n                    </Option>\n                </CustomButton>\n                <CustomButton type=\"text\" onClick={handleMarkAsComplete}>\n                    <Option>\n                        <CheckOutlined />\n                        <OptionsText>\n                            Marcar como completada\n                        </OptionsText>\n                    </Option>\n                </CustomButton>\n                \n        </>\n    )\n}\n\nOptionsCard.propTypes = {\n    handleDelete: PropTypes.func,\n    handleUpdate: PropTypes.func,\n    handleMarkAsComplete: PropTypes.func\n}\n\nOptionsCard.defaultProps = {\n    handleDelete: () => {},\n    handleUpdate: () => {},\n    handleMarkAsComplete: () => {}\n}\n\nexport default OptionsCard\n","import React from 'react';\nimport { Modal } from'antd';\nimport PropTypes from 'prop-types';\nimport { Button } from '../../../../components/Button';\n\nconst ModalDelete = ({ visible, onOk, onCancel, isLoading }) => {\n    return (\n        <Modal          \n            visible={visible}\n            closeIcon={false}\n            onCancel={onCancel}\n            onOk={onOk}\n            footer={[\n                <Button onClick={onCancel} type=\"default\">\n                    Cancelar\n                </Button>,\n                <Button onClick={onOk} loading={isLoading} type=\"primary\">\n                    Aceptar\n                </Button>\n            ]}\n        >\n            ¿Estás seguro que deseas eliminar esta tarea?\n        </Modal>\n    )\n}\n\nModalDelete.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onOk: PropTypes.func,\n    onCancel: PropTypes.func,\n    isLoading: PropTypes.bool.isRequired,\n}\n\nModalDelete.defaultProps = {\n    visible: false,\n    onOk: () => {},\n    onCancel: () => {},\n    isLoading: false,\n}\n\nexport default ModalDelete\n","import React, { useEffect } from 'react';\nimport { Modal, Form, Input, InputNumber  } from'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Button } from '../../../../components/Button';\nimport { colors } from '../../../../utils/colors';\n\nconst LabelForm = styled.label`\nfont-family: 'Poppins', sans-serif;\ncolor: ${colors.black};\nmargin-bottom: 8px;\ndisplay: block;\n`;\n\nconst CustomInput = styled(Input)`\nfont-family: 'Roboto', sans-serif;\ncolor: ${colors.black2};\n`;\n\nconst FlexContainer = styled.div`\n    display: flex;\n    align-items: center;\n    margin-top: 16px;\n`;\n\n\nconst CustomDurationContainer = styled.div`\n    &:first-of-type {\n        margin-right: 16px;\n    }\n`;\n\nconst ModalUpdate = ({ form, visible, onOk, onCancel, isLoading, data }) => {\n\n    useEffect(() => {\n        form.setFieldsValue({\n            \"title\": data.title,\n            \"description\": data.description,\n            \"customDurationMinutes\": data.minutes,\n            \"customDurationSeconds\": data.seconds,\n        })\n    }, [data])\n\n    return (\n        <Modal          \n            visible={visible}\n            closeIcon={false}\n            onCancel={onCancel}\n            onOk={onOk}\n            footer={[\n                <Button onClick={onCancel} type=\"default\">\n                    Cancelar\n                </Button>,\n                <Button onClick={onOk} loading={isLoading} type=\"primary\">\n                    Aceptar\n                </Button>\n            ]}\n        >\n                <Form\n                    layout=\"vertical\"\n                    form={form}\n                >\n                    <LabelForm htmlFor=\"task-title-update\">Título</LabelForm>\n                    <Form.Item name=\"title\">\n                        <CustomInput id=\"task-title-update\" placeholder=\"Título de la tarea\" />\n                    </Form.Item>\n                    <LabelForm htmlFor=\"task-description-update\">Descripción</LabelForm>\n                    <Form.Item name=\"description\">\n                        <CustomInput id=\"task-description-update\" placeholder=\"Título de la tarea\" />\n                    </Form.Item>\n                    <FlexContainer>\n                        <CustomDurationContainer>\n                            <LabelForm htmlFor=\"\">Minutos</LabelForm>\n                            <Form.Item name=\"customDurationMinutes\" rules={[{ type: 'number', min: 0, max: 120 }]}>\n                                <InputNumber />\n                            </Form.Item>\n                        </CustomDurationContainer>\n                        <CustomDurationContainer>\n                            <LabelForm htmlFor=\"\">Segundos</LabelForm>\n                            <Form.Item name=\"customDurationSeconds\" rules={[{ type: 'number', min: 1, max: 59 }]}>\n                                <InputNumber />\n                            </Form.Item>\n                        </CustomDurationContainer>\n                    </FlexContainer>\n\n                </Form>\n        </Modal>\n    )\n}\n\nModalUpdate.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onOk: PropTypes.func,\n    onCancel: PropTypes.func,\n    isLoading: PropTypes.bool.isRequired,\n    data: PropTypes.object\n}\n\nModalUpdate.defaultProps = {\n    visible: false,\n    onOk: () => {},\n    onCancel: () => {},\n    isLoading: false,\n    data: {}\n}\n\nexport default ModalUpdate\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, Empty, Statistic, Form } from 'antd';\nimport { PlayCircleOutlined, PauseCircleOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport Card from '../../../../components/Card/Card';\nimport { deleteTask, getActiveTasks, getTaskById, updateTask, updateTaskStatus } from '../../../../services/task';\nimport { getDeadLine } from '../../../../utils/moment';\nimport { colors } from '../../../../utils/colors';\nimport OptionsCard from '../OptionsCard/OptionsCard';\nimport { ModalDelete } from '../ModalDelete';\nimport ModalUpdate from '../ModalUpdate/ModalUpdate';\n\nconst ListCardContainer = styled.div`\n    margin-top: 24px;\n`;\n\nconst CardTitle = styled.h4`\n    font-size: 14px;\n    font-family: 'Poppins', sans-serif;\n`;\n\nconst CardDescription = styled.p`\n    font-size: 14px;\n    font-family: 'Roboto', sans-serif;\n`;\n\nconst FlexContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nconst OptionsContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n`;\n\nconst CountdownContainer = styled.div``;\n\n\nconst ListCard = ({ newTask }) => {\n    \n    const [tasks, setTasks] = useState([])\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [isModalUpdateVisible, setIsModalUpdateVisible] = useState(false);\n    const [isLoadingOk, setIsLoadingOk] = useState(false);\n    const [taskDeleted, setTaskDeleted] = useState(undefined);\n    const [taskUpdated, setTaskUpdated] = useState(undefined);\n    const [taskStatusUpdated, setTaskStatusUpdated] = useState(undefined);\n    const [currentTaskId, setCurrentTaskId] = useState(null);\n    const [task, setTask] = useState({});\n    const [form] = Form.useForm();\n    const queryClient = useQueryClient();\n    const { isLoading: isLoadingTaskById, data: dataTaskById } = useQuery(['getTaskById', { currentTaskId }], getTaskById, { enabled: isModalUpdateVisible});\n    const { isLoading: isLoadingGet, data: dataActiveTasks } = useQuery('activeTasks', getActiveTasks);\n\n    const { mutate: mutateDelete, isLoading: isLoadingDelete } = useMutation(deleteTask, {\n        onSuccess: data => {\n            setTaskDeleted(data);\n        },\n        onError: () => {\n          console.log(\"there was an error\")\n        },\n        onSettled: () => {\n          queryClient.invalidateQueries('create');\n        }\n    });\n\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } = useMutation(updateTask, {\n        onSuccess: data => {\n            setTaskUpdated(data);\n        },\n        onError: () => {\n          console.log(\"there was an error\")\n        },\n        onSettled: () => {\n          queryClient.invalidateQueries('create');\n        }\n    });\n\n    const { mutate: mutateUpdateStatus } = useMutation(updateTaskStatus, {\n        onSuccess: data => {\n            setTaskStatusUpdated(data);\n        },\n        onError: () => {\n          console.log(\"there was an error\")\n        },\n        onSettled: () => {\n          queryClient.invalidateQueries('create');\n        }\n    });\n\n    useEffect(() => {\n        setTask(dataTaskById);\n    }, [dataTaskById])\n\n    useEffect(() => {\n        if (taskDeleted) {\n            const currentTasks = tasks.slice();\n            const newTasks = currentTasks.filter((task) => task.id !== taskDeleted.id);\n            setTasks([...newTasks]); \n        }\n    }, [taskDeleted])\n\n    useEffect(() => {\n        if (taskUpdated) {\n            const currentTasks = tasks.slice();\n            const found = currentTasks.find((task) => task.id === taskUpdated.id);\n            found.title = taskUpdated.title;\n            found.description = taskUpdated.description\n            found.id = taskUpdated.id;\n            found.minutes = taskUpdated.minutes;\n            found.seconds = taskUpdated.seconds;\n            found.status = taskUpdated.status;\n            found.created_at = taskUpdated.created_at;\n            found.updated_at = taskUpdated.updated_at;\n            \n            setTasks([...currentTasks]); \n        }\n    }, [taskUpdated])\n\n\n    useEffect(() => {\n        if (isLoadingDelete) {\n            setIsLoadingOk(true)\n        } else {\n            setIsLoadingOk(false)\n            setIsModalVisible(false);\n        }\n    }, [isLoadingDelete])\n\n    useEffect(() => {\n        if (isLoadingUpdate) {\n            setIsLoadingOk(true)\n        } else {\n            setIsLoadingOk(false)\n            setIsModalUpdateVisible(false);\n        }\n    }, [isLoadingUpdate])\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const handleCancelUpdate = () => {\n        setIsModalUpdateVisible(false);\n    }\n\n    const handleOk = () => {\n        mutateDelete(currentTaskId);\n        setCurrentTaskId(null);\n    }\n\n    const handleOkUpdate = () => {\n        const taskModified = {}\n        const formUpdateValues = form.getFieldsValue();\n       taskModified.title = formUpdateValues.title;\n       taskModified.description = formUpdateValues.description;\n       taskModified.minutes = formUpdateValues.customDurationMinutes;\n       taskModified.seconds = formUpdateValues.customDurationSeconds;\n\n        mutateUpdate({ id: currentTaskId, data: taskModified });\n        setCurrentTaskId(null);\n    }\n\n    const handleMarkAsComplete = (id) => {\n        mutateUpdateStatus({ id, data: { status: true } })\n    }\n\n    const showModal = (id) => {\n        setCurrentTaskId(id);\n        setIsModalVisible(true);\n    };\n\n    const showModalUpdate = (id) => {\n        setCurrentTaskId(id);\n        setIsModalUpdateVisible(true);\n    }\n\n    useEffect(() => {\n        if (dataActiveTasks) {\n            setTasks(dataActiveTasks)\n        }\n    }, [dataActiveTasks])\n    \n    const countDownRef = useRef([]);\n\n    useEffect(() => {\n        const currentTasks = tasks.slice();\n        const newTasks = currentTasks.filter((task) => task.id !== taskStatusUpdated.id);\n        setTasks([...newTasks]); \n    }, [taskStatusUpdated])\n\n    useEffect(() => {\n        if (newTask) {\n            const currentTasks = tasks.slice();\n            const newTasks = [...currentTasks, newTask];\n            setTasks(newTasks);\n        }\n    }, [newTask])\n\n    const { Countdown } = Statistic;\n\n    const handleStart = (refIndex) => {\n        countDownRef.current[refIndex].startTimer();\n    }\n\n    const handleStop = (refIndex) => {\n        countDownRef.current[refIndex].stopTimer();\n    }\n\n    const handleFinish = (id) => {\n        mutateUpdateStatus({ id, data: { status: true } })\n    }\n\n    \n    return (\n        <ListCardContainer>\n            {\n                isLoadingGet ? <Empty /> : \n                tasks.map((task, i) => \n                    <Card key={task.id}>\n                        <OptionsContainer>\n                            <Popover content={<OptionsCard handleMarkAsComplete={() => handleMarkAsComplete(task.id)} handleUpdate={() => showModalUpdate(task.id)} handleDelete={() => showModal(task.id)} />} trigger=\"click\">\n                                <Button \n                                        type=\"text\" \n                                        shape=\"circle\" \n                                        icon={\n                                            <EllipsisOutlined \n                                                style={{fontSize: '25px', color: colors.black}}  \n                                            />\n                                        }\n                                    />\n                            </Popover>\n                        </OptionsContainer>\n                        <FlexContainer>\n                            <CardTitle>\n                                {task.title}\n                            </CardTitle>\n                            <CountdownContainer>\n                                <Countdown \n                                    value={getDeadLine(task.minutes, task.seconds)}\n                                    ref={el => countDownRef.current[i] = el} \n                                    onFinish={() => handleFinish(task.id)}\n                                />  \n                                <OptionsContainer>\n                                    <Button onClick={() => handleStart(i)} shape=\"circle\" type=\"text\">\n                                        <PlayCircleOutlined />\n                                    </Button>\n                                    <Button onClick={() => handleStop(i)} shape=\"circle\" type=\"text\">\n                                        <PauseCircleOutlined />\n                                    </Button>  \n                                </OptionsContainer>                            \n                            </CountdownContainer>\n                        </FlexContainer>\n                        <CardDescription>\n                            {task.description}\n                        </CardDescription>\n                    </Card>\n                )\n            }\n            <ModalDelete isLoading={isLoadingOk} onOk={handleOk} onCancel={handleCancel} visible={isModalVisible} />\n            <ModalUpdate isLoading={isLoadingOk} onOk={handleOkUpdate} data={task} form={form} visible={isModalUpdateVisible} onCancel={handleCancelUpdate} />\n        </ListCardContainer>\n    )\n}\n\nListCard.propTypes = {\n    newTask: PropTypes.object\n}\n\nListCard.defaultProps = {\n    newTask: undefined,\n}\n\nexport default ListCard\n","import moment from 'moment';\n\nexport const getDeadLine = (minutes, seconds) => {\n    return moment().add(minutes, \"minutes\").add(seconds, \"seconds\");\n}","import React, { useEffect, useState } from 'react'\nimport { Button } from '../../components/Button'\nimport { Modal, Form, Input, Select, Switch, InputNumber } from 'antd';\nimport styled from 'styled-components';\nimport { colors } from '../../utils/colors';\nimport { createTask } from '../../services/task';\nimport { useMutation, useQueryClient } from 'react-query';\nimport ListCard from './components/ListCard/ListCard';\n\nconst Home = () => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [isCheckboxChecked, setIsCheckboxChecked] = useState(false)\n    const [isLoadingOk, setIsLoadingOk] = useState(false);\n    const [newTasAdded, setNewTaskAdded] = useState(undefined);\n    const [form] = Form.useForm();\n    const showModal = () => {\n        setIsModalVisible(true);\n        form.resetFields()\n    };\n    const queryClient = useQueryClient();\n    const { mutate, isLoading } = useMutation(createTask, {\n        onSuccess: data => {\n            setNewTaskAdded(data);\n        },\n        onError: () => {\n          console.log(\"there was an error\")\n        },\n        onSettled: () => {\n          queryClient.invalidateQueries('create');\n        }\n    });\n   \n    useEffect(() => {\n        if (isLoading) {\n            setIsLoadingOk(true);\n        } else {\n            setIsLoadingOk(false);\n            setIsModalVisible(false);\n        }\n    }, [isLoading])\n\n      \n    const handleOk = () => {\n        const formValues = form.getFieldsValue();\n        const newTask = {};\n        newTask.title = formValues.title;\n        newTask.description = formValues.description;\n        newTask.status = 0;\n        if (formValues.preDuration) {\n            newTask.minutes = formValues.preDuration;\n            newTask.seconds = 0;\n        } else {\n            newTask.minutes = formValues.customDurationMinutes;\n            newTask.seconds = formValues.customDurationSeconds;\n        }\n        mutate(newTask);\n    };\n    \n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const LabelForm = styled.label`\n        font-family: 'Poppins', sans-serif;\n        color: ${colors.black};\n        margin-bottom: 8px;\n        display: block;\n    `;\n\n    const CustomInput = styled(Input)`\n        font-family: 'Roboto', sans-serif;\n        color: ${colors.black2};\n    `;\n\n    const FlexContainer = styled.div`\n        display: flex;\n        align-items: center;\n        margin-top: 16px;\n    `;\n\n    const CustomDurationContainer = styled.div`\n        &:first-of-type {\n            margin-right: 16px;\n        }\n    `;\n\n    const handleChangeCheckbox = (checked, e) => {\n        setIsCheckboxChecked(checked);\n    }\n\n    const handlePreDurationChange = (value) => {\n        const currentValues = form.getFieldsValue();\n        form.setFieldsValue({\n            ...currentValues,\n            \"preDuration\": value,\n        })\n    }\n\n\n    return (\n        <>\n            <Button type=\"primary\" onClick={showModal}>\n                Agregar nueva tarea\n            </Button>\n            <ListCard newTask={newTasAdded} />\n            <Modal \n                visible={isModalVisible} \n                onOk={handleOk} \n                onCancel={handleCancel}\n                closeIcon={false}\n                footer={[\n                    <Button type=\"default\" onClick={handleCancel}>\n                        Cancelar\n                    </Button>,\n                    <Button loading={isLoadingOk} type=\"primary\" onClick={handleOk}>\n                        Aceptar\n                    </Button>\n                ]}\n            >\n                <Form\n                    layout=\"vertical\"\n                    form={form}\n                >\n                    <LabelForm htmlFor=\"task-title\">Título</LabelForm>\n                    <Form.Item name=\"title\">\n                        <CustomInput id=\"task-title\" placeholder=\"Título de la tarea\" />\n                    </Form.Item>\n                    <LabelForm htmlFor=\"task-description\">Descripción</LabelForm>\n                    <Form.Item name=\"description\">\n                        <CustomInput id=\"task-description\" placeholder=\"Descripción de la tarea\" />\n                    </Form.Item>\n\n                    <Form.Item>\n                        <LabelForm>Duración personalizada</LabelForm>\n                        <Switch onChange={(checked, e) => handleChangeCheckbox(checked, e)} />\n                    </Form.Item>\n\n                    {\n                        !isCheckboxChecked ? (\n                            <Form.Item name=\"preDuration\">\n                                <LabelForm htmlFor=\"task-pre-duration\">Duraciones predeterminadas</LabelForm>\n                                <Select onChange={(value) => handlePreDurationChange(value)} id=\"task-pre-duration\">\n                                    <Select.Option value=\"30\">Corta: 30 minutos</Select.Option>\n                                    <Select.Option value=\"45\">Mediana: 45 minutos</Select.Option>\n                                    <Select.Option value=\"60\">Larga: 60 minutos</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        ) : (\n                            <FlexContainer>\n                                <CustomDurationContainer>\n                                    <LabelForm htmlFor=\"\">Minutos</LabelForm>\n                                    <Form.Item name=\"customDurationMinutes\" rules={[{ type: 'number', min: 0, max: 120 }]}>\n                                        <InputNumber max={120} />\n                                    </Form.Item>\n                                </CustomDurationContainer>\n                                <CustomDurationContainer>\n                                    <LabelForm htmlFor=\"\">Segundos</LabelForm>\n                                    <Form.Item name=\"customDurationSeconds\" rules={[{ type: 'number', min: 1, max: 59 }]}>\n                                        <InputNumber />\n                                    </Form.Item>\n                                </CustomDurationContainer> \n                            </FlexContainer>\n                        )\n                    }\n                </Form>\n            </Modal>\n        </>\n    )\n}\n\nexport default Home\n","import React, { useEffect, useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { getTasksLastWeek } from '../../services/task';\nimport { Bar } from 'react-chartjs-2';\n\nconst TasksChart = () => {\n    const { isLoading, data } = useQuery('tasksLastWeek', getTasksLastWeek);\n    const [xAxis, setXAxis] = useState([]);\n    const [yAxis, setYAxis] = useState([]);\n   \n    useEffect(() => {\n        if (data) {\n            const days = data.map((task) => task.day)\n            setXAxis(days);\n            const tasks = data.map((task) => task.value);\n            setYAxis(tasks)\n        }\n    }, [data])\n    return (\n      <div>\n        <Bar \n          options={{ \n            maintainAspectRatio: true,\n            scales: {\n              y: {\n                  suggestedMin: 0,\n                  suggestedMax: 20\n              }\n            }\n          }}\n          width={600}\n          height={400}\n          data={{\n            labels: [...xAxis],\n            datasets: [{\n                label: 'Tareas cumplidas',\n                data: [...yAxis],\n                backgroundColor: [\n                    'rgba(54, 162, 235, 0.2)',\n                ],\n                borderColor: [\n                    'rgba(54, 162, 235, 1)',\n\n                ],\n                borderWidth: 1\n            }]\n          }}\n        />\n      </div>\n    )\n}\n\nexport default TasksChart\n","import React from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { getCompletedTasks } from '../../services/task';\nimport { Empty } from 'antd';\nimport styled from 'styled-components';\nimport Card from '../../components/Card/Card';\n\nconst ListCompletedTasks = () => {\n\n    const { isLoading, data } = useQuery('getCompletedTasks', getCompletedTasks)\n\nconst CardTitle = styled.h4`\n    font-size: 14px;\n    font-family: 'Poppins', sans-serif;\n`;\n\nconst CardDescription = styled.p`\n    font-size: 14px;\n    font-family: 'Roboto', sans-serif;\n`;\n\nconst FlexContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\n    return (\n        \n        isLoading ? <Empty /> : data.map((task) => <Card>\n                                <Card key={task.id}>\n                        <FlexContainer>\n                            <CardTitle>\n                                {task.title}\n                            </CardTitle>\n                        </FlexContainer>\n                        <CardDescription>\n                            {task.description}\n                        </CardDescription>\n                    </Card>\n        </Card>)\n        \n    )\n}\n\nexport default ListCompletedTasks\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport { Home } from './views/Home';\nimport { TasksChart } from './views/TasksChart'\nimport styled from 'styled-components';\nimport { colors } from './utils/colors';\nimport \"antd/dist/antd.css\";\nimport { ListCompletedTasks } from './views/ListCompletedTasks';\n\nfunction App() {\n\n  const FlexContainer = styled.div`\n    display: flex;\n  `;\n\n  const CustomSider = styled.div`\n    height: 100vh;\n    background-color: ${colors.gray};\n    padding: 16px;\n    width: 20%;\n    max-width: 300px;\n    min-width: 300px;\n  `\n\n  const CustomLink = styled(Link)`\n    padding: 16px;\n    display: block;\n    background: white;\n    box-shadow: 1px 7px 18px -8px #d4d4d4;\n    border-radius: 5px;\n    margin-bottom: 16px;\n    font-family: 'Poppins', sans-serif;\n    text-decoration: none;\n    color: ${colors.black};\n\n    &:hover {\n      color: ${colors.yellow};\n    }\n  `;\n  const LinksContainer = styled.div`\n    margin-top: 24px;\n  `\n\n  const Content = styled.div`\n    width: 80%;\n    padding: 24px;\n  `;\n\n  return (\n    <Router>\n        <FlexContainer>\n            <CustomSider style={{maxWidth: 'auto'}}>\n              <LinksContainer>\n                <CustomLink to=\"/task-ark-client/\">\n                  Inicio\n                </CustomLink>\n                <CustomLink to=\"/task-ark-client/completed\">\n                  Historial de tareas\n                </CustomLink>\n                <CustomLink to=\"/task-ark-client/productivity\">\n                  Mi productividad\n                </CustomLink>\n              </LinksContainer>\n            </CustomSider>\n            <Content>\n                <Switch>\n                  <Route exact path=\"/task-ark-client/\" component={Home} />\n                  <Route exact path=\"/task-ark-client/productivity\" component={TasksChart} />\n                  <Route exact path=\"/task-ark-client/completed\" component={ListCompletedTasks} />\n              </Switch>\n            </Content>\n        </FlexContainer>\n    </Router>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: 'Roboto', sans-serif;\n        /*\n        font-family: 'Poppins', sans-serif;\n        font-family: 'Roboto', sans-serif;\n        */\n    }\n`\n\nexport default GlobalStyle;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyle from './GlobalStyles';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from 'react-query'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n    },\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n      <QueryClientProvider client={queryClient}>\n        <GlobalStyle />\n        <App />\n     </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}